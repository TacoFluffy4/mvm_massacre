/////////////////////////////////////////////////////////////////////
//
// Example pop file for the map mvm_example.
//
// This pop file contains a sampling of wave types used in MVM and is commented.
// 
/////////////////////////////////////////////////////////////////////
//
// Helpful debug and console commands for developing MVM population scripts:
//
// sv_cheats 1 							// Allows cheat commands.
// god 									// Enables god mode for players.
// nb_stop 1							// Stops all bots in place.
// nb_blind 1 							// Bots will not treat players as threats.
// currency_give x						// Give player x amount of game currency to be used on upgrades.
// tf_populator_health_multiplier x.x	// Multiplies health of enemy bots - example: tf_populator_health_multiplier 0.01 will set health of bots to 1% of normal.
// tf_mvm_popfile abcd					// Will load the .pop file of the specified name - example tf_mvm_popfile mvm_mapname_challenge2 will load mvm_mapname_challenge2.pop in the tf/scripts/population directory.
// tf_mvm_jump_to_wave x				// Will jump to the specified wave number of the current .pop file - example tf_mvm_jump_to_wave 6 will jump to wave 6.
// tf_bot_flag_kill_on_touch 1			// When a bot picks up the flag, they die.
//
/////////////////////////////////////////////////////////////////////
// BEGIN POP FILE
/////////////////////////////////////////////////////////////////////


#base robot_giant.pop                                         	// This pop file is marked to be included. These are other .pop files that contain templates for TFBots. In our WaveSpawns we can reference the templates in these pop files.
#base robot_standard.pop									  	// This pop file is marked to be included. These are other .pop files that contain templates for TFBots. In our WaveSpawns we can reference the templates in these pop files.

WaveSchedule													
{

	StartingCurrency		0                               // How much currency each player starts with. Normally 400 is a good starting point, but increased to 20k for the purpose of this test script.
	
	RespawnWaveTime 0                                        	// This is the maximum respawn time, in seconds for players when they die. Starting at 2 seconds, it grows 2 seconds per wave.
																// In this case, wave 1 will have a respawn time of 2 seconds. Wave 2 - 4 seconds. Wave 3 - 6 seocnds, and so on until it hits the cap of 10 seconds for wave 5 and beyond.
	
	CanBotsAttackWhileInSpawnRoom no                          	// Sets the robots to not attack players while they are inside of their respawn room volume.
	
	/////////////////
	//MISSIONS
	/////////////////	
		
	Mission 													// This is a sentry buster mission. It creates sentry busters for any player sentries deemed too dangerous.
	{
		Objective DestroySentries

		InitialCooldown 5										// Amount of time once a wave starts before the mission becomes active. 
		Where spawnbot_mission_sentrybuster						// Entity at which to spawn.
		BeginAtWave 1											// The mission becomes active on this wave.
		RunForThisManyWaves 11									// It remains active for this many waves. Generally, this is the same as the total number of waves.
		CooldownTime 35            								// This is the time, in seconds, between when Sentry Busters are allowed to spawn, should their spawning conditions be met.

			TFBot
			{
				Template T_TFBot_SentryBuster					// This references a template to use for its TFBot.
			}
	}

	/////////////////
	//WAVES
	/////////////////	
		
	//WAVE 1  /////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// This wave consists of 15 scouts, with 400 currency divided between them.
	// At the start of the wave scouts are spawned in groups of 5, 5 seconds apart, until there are 10 bots are in the world.
	// They spawn at the spawnpoint named spawnbot, and if multiple spawnbot spawn points exist, they choose a random spawnbot each time a group of 2 spawn.
	// As bots are eliminated, new bots spawn in groups of 5 as long as there are enough slots in the max active count.
	// The wave is over when all 15 bot scouts have been eliminated.
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Wave
	{
		StartWaveOutput											// Output which occurs at moment the wave begins.
		{
			Target wave_start_relay								// Name of the entity in the map to target.
			Action Trigger										// Input to give the targeted entity.
		}
		DoneOutput												// Output which occurrs at moment the wave is completed.
		{
			Target wave_finished_relay							// Name of the entity in the map to target.
			Action trigger										// Input to give the targeted entity.
		}

		Checkpoint Yes											// Sets a checkpoint at the end of this wave.

		WaveSpawn
		{
			Where spawnbot										// Entity at which to spawn.
			TotalCount 1										// The total number of individual bots that will spawn.
			MaxActive 100										// The maximum number of bots, from this WaveSpawn, that can be alive in the world at any moment.
			SpawnCount 22										// Defines the number of bots to spawn at a time as a group. 
	
			WaitBeforeStarting 0								// Amount of time to wait before spawning the first bot.
			WaitBetweenSpawns 0									// Amount of time to wait between spawning each group (defined by the spawncount) of bots.
			
			TotalCurrency 1000000									// Amount of money dropped by all of the bots in the WaveSpawn. Money is divided equally between each bot.
				
			TFBot
			{
				Name round1
				WeaponRestrictions MeleeOnly
				Health 1
				Class Scout									// Type of bot to spawn.
				Skill Easy 								// Skill level of bot. options are Easy, Normal, Hard, Expert in ascending difficulty.
			}
		}
	}



}